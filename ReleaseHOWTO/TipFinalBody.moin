{{{#!wiki warning
These instructions use outdated workflow based on svnmerge tool.
}}}

This flow takes the available changesets in `checkpoint` and brings `release` up to date.  It assumes that `checkpoint` and `release` already exist and have been set up correctly.

The `trunk` is the authoritative source for everything that goes in a release; only under exceptional circumstances are changes made to other branches.  The general rule is that a change is made to `trunk`, brought over to `checkpoint` and then merged into `release`.

This flow assumes that any needed changesets are already in `checkpoint`; if not, you will need to commit a suitable changeset to `trunk` following your usual development practices, then [[../TipCherryPick| cherry-pick the changes]] into `checkpoint` before starting this flow.

If you want a checklist you can mark off as you go, cut-n-paste these contents.

<<TableOfContents(3)>>

<<Include(../InitSVN)>>
{{{
  $ VERSION=3.2.0.final.0
}}}

=== Check Out Release ===
<<Include(../CheckOutRelease)>>

<<Anchor(MergeAgain)>>
=== Merge Checkpoint into Release ===

{{{
  $ cd release
  $ svnmerge merge -b -S $SVN/checkpoint -f commit.txt
}}}

=== Resolve Conflicts ===
<<Include(../Resolved)>>

=== Update Release Values ===
Verify that 'release_level` in `ReleaseConfig` is being set to `'final'`.

<<Include(../UpdateFiles)>>

=== Commit Release ===
Look at the log messages in `commit.txt` and create `log.file` that hits the highlights of the changes that have been incorporated.  Much of the information should already be in `src/Announce.txt`, so it mostly involves copy-n-past from there.  Cut it heavily to one or two lines per feature; the major use of this log is people who are scanning to see where a feature was added, and they will appreciate clarity and brevity.  This is an example of what `log.file` might be like:

{{{
Rebased the release branch to r54321 of the checkpoint branch.

  -- The blah was updated to do foo

  -- Feature bar was added by John Doe

  -- Various typos
}}}

Commit the changes using the log message:

<<Include(../Commit)>>

=== Build Candidate Packages ===
<<Include(../Bootstrap)>>

=== Test the Candidate Packages ===

This script is kept in the distribution as bin/xxxxxxxxx:
{{{
  $ set -e
  $ python runtest.py -a
}}}
Make a copy of it and edit it based on the description below.

'''Regression Test'''

The first line of the script runs the regression test.  The SCons Build``Bot monitors this branch and probably started running regression tests as soon as you checked in the branch.  If so, delete the first line of the script as the Build``Bot is more comprehensive that running the test on a single machine.  You will need to keep an eye on the [[http://buildbot.scons.org/console?branch=release| BuildBot display |target=_blank]] until all the slaves have finished.

'''Package Tests'''

<<Include(../TestCandidates)>>

If any of the tests fail, fix the problem in `trunk` following your usual development practices, [[../TipCherryPick| cherry-pick the changes]] into the `checkpoint` branch, and go back to [[#MergeAgain| merge the changeset(s)]] into the `release` branch.

=== Tag the Release ===
<<Include(../TagRelease)>>

=== Archive Candidate Packages ===
<<Include(../ArchivePackages)>>

=== Update SourceForge ===
<<Include(../UpdateSourceForge)>>

=== Update scons.org ===
<<Include(../UpdateSConsOrg)>>

=== Update Tigris.org ===
<<Include(../UpdateTigris)>>

=== Announce ===
<<Include(../AnnounceAll)>>

=== Update Trunk to Next Version ===

'''Initialize files for next version'''

<<Include(../CheckOutTrunk)>>

From within the `trunk` directory, edit `ReleaseConfig` and change the assignment of `release_level` to `'post'`.

<<Include(../UpdateFiles)>>

A release level of `'post'` causes `update-release-info.py` to update `ReleaseConfig` itself to the next minor version and then tweak some other files to set them up for the the beginning of a new version.

'''Verify files are correct'''

Edit files ... [[../TipFinalBody|FIXME]]

'''Commit changes for next version'''

Create `log.file` ... [[../TipFinalBody|FIXME]]

<<Include(../Commit)>>

'''Finalize'''

Go celebrate; you're all done.
