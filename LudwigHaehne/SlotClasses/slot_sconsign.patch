Index: src/engine/SCons/Node/FS.py
===================================================================
--- src/engine/SCons/Node/FS.py	(revision 3234)
+++ src/engine/SCons/Node/FS.py	(working copy)
@@ -1263,7 +1263,7 @@
 
 class DirNodeInfo(SCons.Node.NodeInfoBase):
     # This should get reset by the FS initialization.
-    current_version_id = 1
+    current_version_id = 2
 
     fs = None
 
@@ -1279,7 +1279,7 @@
         return root._lookup_abs(s, Entry)
 
 class DirBuildInfo(SCons.Node.BuildInfoBase):
-    current_version_id = 1
+    current_version_id = 2
 
 glob_magic_check = re.compile('[*?[]')
 
@@ -2037,8 +2037,11 @@
         return _null
 
 class FileNodeInfo(SCons.Node.NodeInfoBase):
-    current_version_id = 1
 
+    __slots__ = ("csig", "timestamp", "size")
+
+    current_version_id = 2
+
     field_list = ['csig', 'timestamp', 'size']
 
     # This should get reset by the FS initialization.
@@ -2056,7 +2059,7 @@
         return root._lookup_abs(s, Entry)
 
 class FileBuildInfo(SCons.Node.BuildInfoBase):
-    current_version_id = 1
+    current_version_id = 2
 
     def convert_to_sconsign(self):
         """
@@ -2491,7 +2494,7 @@
             # any build information that's stored in the .sconsign file
             # into our binfo object so it doesn't get lost.
             old = self.get_stored_info()
-            self.get_binfo().__dict__.update(old.binfo.__dict__)
+            self.get_binfo().merge(old.binfo)
 
         self.store_info()
 
Index: src/engine/SCons/Node/NodeTests.py
===================================================================
--- src/engine/SCons/Node/NodeTests.py	(revision 3233)
+++ src/engine/SCons/Node/NodeTests.py	(working copy)
@@ -230,7 +230,8 @@
         ni2.a3 = 333
 
         ni1.merge(ni2)
-        expect = {'a1':1, 'a2':222, 'a3':333, '_version_id':1}
+        #expect = {'a1':1, 'a2':222, 'a3':333, '_version_id':1}
+        expect = {'a1':1, 'a2':222, 'a3':333}
         assert ni1.__dict__ == expect, ni1.__dict__
 
     def test_update(self):
Index: src/engine/SCons/Node/Alias.py
===================================================================
--- src/engine/SCons/Node/Alias.py	(revision 3233)
+++ src/engine/SCons/Node/Alias.py	(working copy)
@@ -57,13 +57,14 @@
             return None
 
 class AliasNodeInfo(SCons.Node.NodeInfoBase):
-    current_version_id = 1
+    current_version_id = 2
+    __slots__ = ('csig')
     field_list = ['csig']
     def str_to_node(self, s):
         return default_ans.Alias(s)
 
 class AliasBuildInfo(SCons.Node.BuildInfoBase):
-    current_version_id = 1
+    current_version_id = 2
 
 class Alias(SCons.Node.Node):
 
Index: src/engine/SCons/Node/__init__.py
===================================================================
--- src/engine/SCons/Node/__init__.py	(revision 3233)
+++ src/engine/SCons/Node/__init__.py	(working copy)
@@ -101,18 +101,17 @@
 
 # Classes for signature info for Nodes.
 
-class NodeInfoBase:
+class NodeInfoBase(object):
     """
     The generic base class for signature information for a Node.
 
     Node subclasses should subclass NodeInfoBase to provide their own
     logic for dealing with their own Node-specific signature information.
     """
-    current_version_id = 1
-    def __init__(self, node):
-        # Create an object attribute from the class attribute so it ends up
-        # in the pickled data in the .sconsign file.
-        self._version_id = self.current_version_id
+    __slots__ = ("__weakref__",)
+
+    current_version_id = 2
+
     def update(self, node):
         try:
             field_list = self.field_list
@@ -132,13 +131,24 @@
     def convert(self, node, val):
         pass
     def merge(self, other):
-        self.__dict__.update(other.__dict__)
+        """
+        Merge the fields of another object into this object. Already existing
+        information is overwritten by the other instance's data.
+        WARNING: If a '__dict__' slot is added, it should be updated instead of
+        replaced.
+        """
+        state = other.__getstate__()
+        self.__setstate__(state)
     def format(self, field_list=None, names=0):
         if field_list is None:
             try:
                 field_list = self.field_list
             except AttributeError:
-                field_list = self.__dict__.keys()
+                field_list = getattr(self, '__dict__', {}).keys()
+                for obj in type(self).mro():
+                    for slot in getattr(obj, '__slots__', ()):
+                        if slot not in ('__weakref__', '__dict__'):
+                            field_list.append(slot)
                 field_list.sort()
         fields = []
         for field in field_list:
@@ -152,7 +162,37 @@
             fields.append(f)
         return fields
 
-class BuildInfoBase:
+    def __getstate__(self):
+        """
+        Return all fields that shall be pickled. Walk the slots in the class
+        hierarchy and add those to the state dictionary. If a '__dict__' slot is
+        available, copy all entries to the dictionary. Also include the version
+        id, which is fixed for all instances of a class.
+        """
+        state = getattr(self, '__dict__', {}).copy()
+        for obj in type(self).mro():
+            for name in getattr(obj,'__slots__',()):
+                if hasattr(self, name):
+                    state[name] = getattr(self, name)
+
+        state['_version_id'] = self.current_version_id
+        try:
+            del state['__weakref__']
+        except KeyError:
+            pass
+        return state
+
+    def __setstate__(self, state):
+        """
+        Restore the attributes from a pickled state. The version is discarded.
+        """
+        # TODO check or discard version
+        del state['_version_id']
+
+        for key, value in state.items():
+            setattr(self, key, value)
+
+class BuildInfoBase(object):
     """
     The generic base class for build information for a Node.
 
@@ -162,18 +202,56 @@
     generic build stuff we have to track:  sources, explicit dependencies,
     implicit dependencies, and action information.
     """
-    current_version_id = 1
-    def __init__(self, node):
-        # Create an object attribute from the class attribute so it ends up
-        # in the pickled data in the .sconsign file.
-        self._version_id = self.current_version_id
+    __slots__ = ("bsourcesigs", "bdependsigs", "bimplicitsigs", "bactsig",
+        "bsources", "bdepends", "bact", "bimplicit", "__weakref__")
+
+    current_version_id = 2
+    def __init__(self):
         self.bsourcesigs = []
         self.bdependsigs = []
         self.bimplicitsigs = []
         self.bactsig = None
+
     def merge(self, other):
-        self.__dict__.update(other.__dict__)
+        """
+        Merge the fields of another object into this object. Already existing
+        information is overwritten by the other instance's data.
+        WARNING: If a '__dict__' slot is added, it should be updated instead of
+        replaced.
+        """
+        state = other.__getstate__()
+        self.__setstate__(state)
 
+    def __getstate__(self):
+        """
+        Return all fields that shall be pickled. Walk the slots in the class
+        hierarchy and add those to the state dictionary. If a '__dict__' slot is
+        available, copy all entries to the dictionary. Also include the version
+        id, which is fixed for all instances of a class.
+        """
+        state = getattr(self, '__dict__', {}).copy()
+        for obj in type(self).mro():
+            for name in getattr(obj,'__slots__',()):
+                if hasattr(self, name):
+                    state[name] = getattr(self, name)
+
+        state['_version_id'] = self.current_version_id
+        try:
+            del state['__weakref__']
+        except KeyError:
+            pass
+        return state
+
+    def __setstate__(self, state):
+        """
+        Restore the attributes from a pickled state.
+        """
+        # TODO check or discard version
+        del state['_version_id']
+        for key, value in state.items():
+            setattr(self, key, value)
+
+
 class Node:
     """The base Node class, for entities that we know how to
     build, or use to build other Nodes.
@@ -668,7 +746,7 @@
     BuildInfo = BuildInfoBase
 
     def new_ninfo(self):
-        ninfo = self.NodeInfo(self)
+        ninfo = self.NodeInfo()
         return ninfo
 
     def get_ninfo(self):
@@ -679,7 +757,7 @@
             return self.ninfo
 
     def new_binfo(self):
-        binfo = self.BuildInfo(self)
+        binfo = self.BuildInfo()
         return binfo
 
     def get_binfo(self):
Index: src/engine/SCons/Node/Python.py
===================================================================
--- src/engine/SCons/Node/Python.py	(revision 3233)
+++ src/engine/SCons/Node/Python.py	(working copy)
@@ -32,15 +32,17 @@
 import SCons.Node
 
 class ValueNodeInfo(SCons.Node.NodeInfoBase):
-    current_version_id = 1
+    __slots__ = ('csig',)
 
+    current_version_id = 2
+    
     field_list = ['csig']
 
     def str_to_node(self, s):
         return Value(s)
 
 class ValueBuildInfo(SCons.Node.BuildInfoBase):
-    current_version_id = 1
+    current_version_id = 2
 
 class Value(SCons.Node.Node):
     """A class for Python variables, typically passed on the command line 
Index: src/engine/SCons/SConsign.py
===================================================================
--- src/engine/SCons/SConsign.py	(revision 3233)
+++ src/engine/SCons/SConsign.py	(working copy)
@@ -116,16 +116,39 @@
     XXX As coded below, we do expect a '.binfo' attribute to be added,
     but we'll probably generalize this in the next refactorings.
     """
-    current_version_id = 1
+    __slots__ = ("binfo", "ninfo", "__weakref__")
+
+    current_version_id = 2
     def __init__(self):
         # Create an object attribute from the class attribute so it ends up
         # in the pickled data in the .sconsign file.
-        _version_id = self.current_version_id
+        #_version_id = self.current_version_id
+        pass
     def convert_to_sconsign(self):
         self.binfo.convert_to_sconsign()
     def convert_from_sconsign(self, dir, name):
         self.binfo.convert_from_sconsign(dir, name)
 
+    def __getstate__(self):
+        state = getattr(self, '__dict__', {}).copy()
+        for obj in type(self).mro():
+            for name in getattr(obj,'__slots__',()):
+                if hasattr(self, name):
+                    state[name] = getattr(self, name)
+
+        state['_version_id'] = self.current_version_id
+        try:
+            del state['__weakref__']
+        except KeyError:
+            pass
+        return state
+
+    def __setstate__(self, state):
+        for key, value in state.items():
+            if key not in ('_version_id'):
+                setattr(self, key, value)
+        
+
 class Base:
     """
     This is the controlling class for the signatures for the collection of
